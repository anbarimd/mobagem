package net.h2.web.mob.file.profile.controller;

import java.io.IOException;
import java.util.Iterator;

import net.h2.web.core.base.exception.BaseServerBusinessException;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;

@RestController
@RequestMapping("/site")
public class ProfileUploadController {
	
	Logger logger = LoggerFactory.getLogger(ProfileUploadController.class);
	
	@ResponseBody
	@RequestMapping(value = "/file/upload",  method = RequestMethod.POST)
	public String uploadFile(MultipartHttpServletRequest request) throws IOException {		

			Iterator<String> itr = request.getFileNames();

			while (itr.hasNext()) {
				String uploadedFile = itr.next();
				MultipartFile file = request.getFile(uploadedFile);
				String mimeType = file.getContentType();
				String filename = file.getOriginalFilename();
				byte[] bytes = file.getBytes();

//				FileUploadController newFile = new FileUploadController(filename, bytes, mimeType);
//
//				fileUploadService.uploadFile(newFile);
				
			}
			return null;
		
	}
	
	
	@ExceptionHandler({Exception.class})
	public ResponseEntity<String> errorHandler(Exception exc) {
		logger.error(exc.getMessage(), exc);
		if (exc instanceof BaseServerBusinessException) {
			String exceptionCode = ((BaseServerBusinessException) exc).getExceptionCode();
			String exceptionMsg = ((BaseServerBusinessException) exc).getExceptionCode();
			return new ResponseEntity<>(exceptionCode + ":" + exceptionMsg, HttpStatus.INTERNAL_SERVER_ERROR);
		}		
		else			
			return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
	}
}
